const from = 0;
const to = 5;

extern malloc: (i64) -> ptr<void>;
extern free: (ptr<void>) -> void;

extern memset: (ptr<void>, i64, i64) -> ptr<void>;

extern srand: (u32) -> void;
extern rand: () -> i32;
extern time: () -> u32;

pub fun main() -> i32 {

    // malloc free test
    let memsize = 1000000000;
    let pointer = malloc(memsize);
    memset(pointer, 0, memsize);
    free(pointer);

    // a b c
    let funVariable = fib;
    funVariable = fibDoubled;
    // allow shadowing
    let sum = sum(from, to, funVariable);
    srand(time());
    return rand();
}

fun sum(from: i64, to: i64, func: ptr<(i64) -> i64>) -> i64 {
    let sum = 0;
    for(let i = from; i < to; i = i + 1) {
        sum = sum + func(i);
    }
    return sum;
}

fun fib(n : i64) -> i64 {
    if (n == 0) {
        return 0;
    }

    if (n == 1) {
        return 1;
    }

    return fib(n - 1) + fib(n - 2);
}

fun fibDoubled(n: i64) -> i64 {
    return fib(n) * 2;
}