union zeroBytes {}

union oneBytes {
    a: i8,
    b: u8
}

union twoBytes {
    a: i8,
    b: u16
}

union fourBytes {
    a: i16,
    b: u32
}

union eightBytes {
    a: i32,
    b: u64
}

union ptrUnion {
    a: u8,
    b: ptr<i8>
}

pub fun main() -> i64 {
    if (sizeof(zeroBytes) != cast<u64> 0) {
        return 1;
    }
    if (sizeof(oneBytes) != cast<u64> 1) {
        return 1;
    }
    if (sizeof(twoBytes) != cast<u64> 2) {
        return 1;
    }
    if (sizeof(fourBytes) != cast<u64> 4) {
        return 1;
    }
    if (sizeof(eightBytes) != cast<u64> 8) {
        return 1;
    }
    if (sizeof(ptrUnion) != cast<u64> 8) {
        return 1;
    }
    let i: oneBytes;
    i = passByValue(i);
    if (i.a != cast<i8> 5) {
        return 1;
    }
    passByPtr(&i);
    return cast<i64> i.b;
}

fun passByValue(i: oneBytes) -> oneBytes {
    i.a = cast<i8> 5;
    return i;
}

fun passByPtr(i: ptr<oneBytes>) -> void {
    i.a = cast<i8> 0;
}
